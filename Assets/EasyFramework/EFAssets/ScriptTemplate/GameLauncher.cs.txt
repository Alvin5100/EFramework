using UnityEngine;

namespace PleaseModify
{
    /// <summary>
    /// This is a game launcher.   Don't forget to mount it to the scene
    /// <para>这是一个游戏启动器，别忘了在场景中挂载它</para>
    /// </summary>
    public class GameLauncher : MonoBehaviour
    {
        private void Start()
        {
            EasyFramework.D.Init();
#if UNITY_EDITOR
            EF.ClearConsole();
#endif

            #region Show platform infomation.展示平台信息
            EasyFramework.D.Correct($"CPU: {SystemInfo.processorType}({SystemInfo.processorCount}cores核心数)   " +
                $"  RAM = {Mathf.RoundToInt(SystemInfo.systemMemorySize / 1024f)}G     " +
                $"  GPU: {SystemInfo.graphicsDeviceName}   " +
                $"  VRAM = {Mathf.RoundToInt(SystemInfo.graphicsMemorySize / 1024f)}G        " +
                Screen.currentResolution.ToString());
            #endregion

            EasyFramework.D.Log("======================Initialize======================");
            //在这里写初始化内容，音频播放、首页UI进入、数据初始化、各类管理器初始化都可以在此

            #region Set the game run time info
            //Application.targetFrameRate = 60;
            Application.runInBackground = true;
            #endregion

            //放置多久后屏幕变暗
            EF.Timer.SleepTimeout = SleepTimeout.NeverSleep;

            //FPS展示
            EasyFramework.Utils.FPSOnGUI.Instance.allowDrag = true;

            //资源热更     仅支持Unity2019.4+      加载资源逻辑需要自己实现、根据项目的不同，逻辑也不同   已加入Load类计划
            //EF.Patch.StartUpdatePatch(EasyFramework.Managers.EFPlayMode.HostPlayMode, delegate
            //{
            //    //热更结束后
            //    //EF.Scenes.LoadSceneWithName("");
            //});
            
            //启用网络连接，如果只有一个网络连接时，则可以不接取连接id
            if (false)
            {
                //int _wsID = EF.Socket.CreateOne("wss://echo.websocket.events", null,
                EF.Socket.CreateOne("wss://echo.websocket.events", null,
                    (open) =>
                    {
                        EasyFramework.D.Log($"OnOpen: \t e:{open}");
                    },
                    (close) =>
                    {
                        EasyFramework.D.Warning($"OnClosed: \t e:{close.Reason}");
                    },
                    (error) =>
                    {
                        EasyFramework.D.Error($"OnError: \t e:{error.Message}");
                    },
                    (message) =>
                    {
                        EasyFramework.D.Correct($"OnMessage:  \t e:{message.Data}");
                    }
                );

                //EF.Socket.Connect(_wsID);
                //EF.Socket.Send("That a message to server.", _wsID);
                //EF.Socket.Dispose(_wsID);
                EF.Socket.Connect();
                EF.Socket.Send("That a message to server.");
                EF.Socket.Dispose();
            }

            //UI进入
            //EF.Ui.Push(new You Class());

            //音频播放
            //EF.Audio.PlayBGMByName("You bgm`s name", true);     //需要先在Project Setting中配置路径
            //EF.Audio.Play2DEffectSouceByClip();

            //协程启动与关闭都通过EF
            //EF.StartCoroutines(LoadMetadataForAOTAssemblies());

            //读表工具初始化
            //EasyFramework.ExcelTool.ExcelDataManager.Init("JsonData");        //数据需要放到Resources文件夹中
            //ExcelDataCacheManager.CacheAllData();     //之后缓存全部数据到项目中


        }

        #region RunDllCode      代码热更相关
        /// <summary>
        /// 为aot assembly加载原始metadata， 这个代码放aot或者热更新都行。
        /// 一旦加载后，如果AOT泛型函数对应native实现不存在，则自动替换为解释模式执行
        /// </summary>
        //System.Collections.IEnumerator LoadMetadataForAOTAssemblies()
        //{
        //    YooAsset.RawFileOperationHandle _handle = m_Package.LoadRawFileAsync("ExampleGame.dll");
        //    _handle.Completed += delegate
        //    {
        //        byte[] dllBytes = _handle.GetRawFileData();
        //        System.Reflection.Assembly hotUpdateAss = System.Reflection.Assembly.Load(dllBytes);
        //        System.Type type = hotUpdateAss.GetType("EFExample.APPMain");//找不到类型，加命名空间试试
        //        System.Reflection.MethodInfo _info = type.GetMethod("Run");
        //        _info.Invoke(null, null);
        //    };
        //    yield return _handle;
        //}
        #endregion
    }
}
